import { Bot, InlineKeyboard, Keyboard } from 'grammy';
import mongoose from 'mongoose';
import dotenv from 'dotenv';
import { Category, Request, Lawyer, LawyerApplication, SupportApplication, UserQuestion, UserActionLog } from './models.js';
import path from 'path';
import { fileURLToPath } from 'url';

dotenv.config();

// –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Ç–µ–∫—É—â–µ–º—É —Ñ–∞–π–ª—É
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º
mongoose.connect(process.env.MONGODB_URI, {
  serverSelectionTimeoutMS: 30000, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–æ 30 —Å–µ–∫—É–Ω–¥
  socketTimeoutMS: 45000, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç —Å–æ–∫–µ—Ç–∞
})
  .then(() => console.log('Connected to MongoDB'))
  .catch(err => console.error('MongoDB connection error:', err));

// –°–æ–∑–¥–∞–Ω–∏–µ –µ–¥–∏–Ω–æ–≥–æ –±–æ—Ç–∞
const bot = new Bot(process.env.BOT_TOKEN);

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
const isAdmin = (ctx) => {
  const adminIds = process.env.ADMIN_IDS.split(',').map(id => id.trim());
  return adminIds.includes(ctx.from.id.toString());
};

// –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∏–∞–ª–æ–≥–æ–≤
const userStates = {};

// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–í –Ω–∞—á–∞–ª–æ"
const mainKeyboard = new Keyboard()
  .text("üè† –í –Ω–∞—á–∞–ª–æ")
  .resized();

// –ë–∞–∑–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ /start –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
bot.command('start', async (ctx) => {
  try {
    await logUserAction(ctx, 'command', { command: 'start' });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    await ctx.reply('üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –ë–æ—Ç! –ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö —é—Ä–∏—Å—Ç–æ–≤ –ø–æ –≤—Å–µ–π –†–æ—Å—Å–∏–∏. –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µüëá', {
      reply_markup: mainKeyboard
    });

    await showMainMenu(ctx);
  } catch (error) {
    console.error('–ü–æ–¥—Ä–æ–±–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ start:', error.message, error.stack);
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–í –Ω–∞—á–∞–ª–æ"
bot.hears('üè† –í –Ω–∞—á–∞–ª–æ', async (ctx) => {
  try {
    // –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É
    await logUserAction(ctx, 'button_text_click', { button: 'üè† –í –Ω–∞—á–∞–ª–æ' });
    await showMainMenu(ctx);
  } catch (error) {
    console.error('Error handling main button:', error);
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
bot.command('stats', async (ctx) => {
  if (!isAdmin(ctx)) {
    return ctx.reply('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
  }

  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
    const oneDayAgo = new Date();
    oneDayAgo.setDate(oneDayAgo.getDate() - 1);

    // –°—á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å username (–∫–∞–∫ –≤ —Å–ø–∏—Å–∫–µ)
    const usersWithUsername = await UserActionLog.aggregate([
      { $match: { username: { $ne: null, $ne: '' } } },
      { $group: { _id: '$username' } },
      { $count: 'count' }
    ]);
    const totalUsers = usersWithUsername[0]?.count || 0;

    const totalActions = await UserActionLog.countDocuments();
    const recentActions = await UserActionLog.countDocuments({ timestamp: { $gte: oneDayAgo } });

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-5 —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    const popularActions = await UserActionLog.aggregate([
      { $match: { timestamp: { $gte: oneDayAgo } } },
      { $group: { _id: '$action', count: { $sum: 1 } } },
      { $sort: { count: -1 } },
      { $limit: 5 }
    ]);

    let statsMessage = `<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n`;
    statsMessage += `üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUsers}\n`;
    statsMessage += `üî¢ –í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π: ${totalActions}\n`;
    statsMessage += `üìà –î–µ–π—Å—Ç–≤–∏–π –∑–∞ 24 —á–∞—Å–∞: ${recentActions}\n\n`;

    statsMessage += `üîù –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –∑–∞ 24 —á–∞—Å–∞:\n`;
    popularActions.forEach((item, index) => {
      statsMessage += `${index + 1}. ${item._id}: ${item.count} —Ä–∞–∑\n`;
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    const keyboard = new InlineKeyboard().row({ text: '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', callback_data: 'show_users:0' });

    await ctx.reply(statsMessage, { parse_mode: 'HTML', reply_markup: keyboard });
  } catch (error) {
    console.error('Error showing stats:', error);
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –ª–æ–≥–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
bot.command('export_logs', async (ctx) => {
  if (!isAdmin(ctx)) {
    return ctx.reply('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
  }
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
    const sevenDaysAgo = new Date();
    sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);
    
    const logs = await UserActionLog.find({ timestamp: { $gte: sevenDaysAgo } })
      .sort({ timestamp: -1 })
      .limit(1000); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
    
    if (logs.length === 0) {
      return ctx.reply('–õ–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }
    
    // –°–æ–∑–¥–∞–µ–º CSV —Å—Ç—Ä–æ–∫—É
    let csv = 'UserId,Username,Action,ActionData,Timestamp\n';
    
    logs.forEach(log => {
      const actionDataStr = JSON.stringify(log.actionData).replace(/"/g, '""');
      csv += `${log.userId},${log.username},${log.action},"${actionDataStr}",${log.timestamp}\n`;
    });
    
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    const fs = await import('fs/promises');
    const os = await import('os');
    const path = await import('path');
    
    const tempFilePath = path.default.join(os.default.tmpdir(), `bot_logs_${new Date().toISOString().slice(0, 10)}.csv`);
    await fs.default.writeFile(tempFilePath, csv, 'utf8');
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
    await ctx.replyWithDocument({
      source: tempFilePath
    });
    
    // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
    await fs.default.unlink(tempFilePath);
  } catch (error) {
    console.error('Error exporting logs:', error);
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –ª–æ–≥–æ–≤');
  }
});

async function logUserAction(ctx, action, actionData = {}) {
  try {
    const userId = ctx.from.id.toString();
    const username = ctx.from.username || '';
    const firstName = ctx.from.first_name || '';
    const lastName = ctx.from.last_name || '';

    const log = new UserActionLog({
      userId,
      username,
      action,
      actionData: {
        ...actionData,
        userFullName: `${firstName} ${lastName}`.trim()
      }
    });

    await log.save();
  } catch (error) {
    console.error('Error logging user action:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
async function showMainMenu(ctx) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const categories = await Category.find({});

    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    const keyboard = new InlineKeyboard();

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    for (const category of categories) {
      keyboard.row({ text: category.name, callback_data: `category:${category._id.toString()}` });
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–î–ª—è —é—Ä–∏—Å—Ç–æ–≤"
    keyboard.row({ text: 'üë®‚Äç‚öñÔ∏è –î–ª—è —é—Ä–∏—Å—Ç–æ–≤', callback_data: 'for_lawyers' });

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π"
    keyboard.row({ text: '‚úâÔ∏è –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π', callback_data: 'contact_support' });

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if (isAdmin(ctx)) {
      keyboard.row({ text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é', callback_data: 'add_category' });
    }

    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–∞–≤–∞:', {
      reply_markup: keyboard
    });
  } catch (error) {
    console.error('Error showing main menu:', error);
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤
bot.on('callback_query:data', async (ctx) => {
  try {
    const data = ctx.callbackQuery.data;
    const userId = ctx.from.id.toString();

    // –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É
    await logUserAction(ctx, 'button_click', { button: data });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
    if (data.startsWith('search:')) {
      const categoryId = data.split(':')[1];

      userStates[userId] = {
        action: 'waiting_search_query',
        categoryId
      };

      await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:');
      await ctx.answerCallbackQuery();
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ó–∞–¥–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å"
    if (data.startsWith('ask_question:')) {
      const categoryId = data.split(':')[1];
      const category = await Category.findById(categoryId);

      if (!category) {
        await ctx.reply('–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        await ctx.answerCallbackQuery();
        return;
      }

      userStates[userId] = {
        action: 'waiting_user_question',
        categoryId
      };

      await ctx.reply('‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ. –ú—ã –ø–æ–¥–±–µ—Ä—ë–º —é—Ä–∏—Å—Ç–∞ –∏ –ø–µ—Ä–µ—à–ª—ë–º –≤–∞—à –∑–∞–ø—Ä–æ—Å: \n\nüü° –ü—Ä–∏–º–µ—Ä: \n¬´–ú–æ–π —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç –ø—Ä–∏–∫–∞–∑ –æ–± —É–≤–æ–ª—å–Ω–µ–Ω–∏–∏ –∏ –Ω–µ –ø–ª–∞—Ç–∏—Ç –æ—Ç–ø—É—Å–∫–Ω—ã–µ. –ß—Ç–æ –¥–µ–ª–∞—Ç—å?¬ª \n\n–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ–ª—É—á–∏—Ç —é—Ä–∏—Å—Ç –ø–æ –¥–∞–Ω–Ω–æ–º—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∏ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–∏ –¥–Ω—è.');
      await ctx.answerCallbackQuery();
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if (data === 'add_category') {
      if (!isAdmin(ctx)) {
        await ctx.answerCallbackQuery('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
        return;
      }

      userStates[userId] = { action: 'waiting_category_name' };
      await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:');
      await ctx.answerCallbackQuery();
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
    if (data === 'add_request' || data.startsWith('add_request:')) {
      if (!isAdmin(ctx)) {
        await ctx.answerCallbackQuery('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
        return;
      }

      const categoryId = data.startsWith('add_request:') ? data.split(':')[1] : userStates[userId].categoryId;

      userStates[userId] = {
        action: 'waiting_request_title',
        categoryId: categoryId
      };
      await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:');
      await ctx.answerCallbackQuery();
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —é—Ä–∏—Å—Ç–∞
    if (data === 'add_lawyer' || data.startsWith('add_lawyer:')) {
      if (!isAdmin(ctx)) {
        await ctx.answerCallbackQuery('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
        return;
      }

      const requestId = data.startsWith('add_lawyer:') ? data.split(':')[1] : userStates[userId].requestId;

      userStates[userId] = {
        action: 'waiting_lawyer_name',
        requestId: requestId
      };
      await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∏–º—è —é—Ä–∏—Å—Ç–∞:');
      await ctx.answerCallbackQuery();
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –∫ –≤–æ–ø—Ä–æ—Å—É
    if (data.startsWith('add_request_answer:') || data.startsWith('edit_request_answer:')) {
      if (!isAdmin(ctx)) {
        await ctx.answerCallbackQuery('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
        return;
      }

      const requestId = data.split(':')[1];
      const request = await Request.findById(requestId);

      if (!request) {
        await ctx.reply('–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        await ctx.answerCallbackQuery();
        return;
      }

      userStates[userId] = {
        action: 'waiting_request_answer',
        requestId
      };

      const currentAnswer = request.answer || '';
      const actionText = data.startsWith('add_request_answer:') ? '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ' : '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ';

      await ctx.reply(`${actionText} –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞:\n"${request.title}"\n\n${currentAnswer ? '–¢–µ–∫—É—â–∏–π –æ—Ç–≤–µ—Ç:\n' + currentAnswer + '\n\n' : ''}–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç:`);
      await ctx.answerCallbackQuery();
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–î–ª—è —é—Ä–∏—Å—Ç–æ–≤"
    if (data === 'for_lawyers') {
      const keyboard = new InlineKeyboard()
        .row({ text: 'üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É', callback_data: 'submit_lawyer_application' })
        .row({ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_main' });

      await ctx.reply('‚öñÔ∏è –•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Ç—ë–ø–ª—ã–µ –∑–∞—è–≤–∫–∏ –±–µ–∑ —Ä–µ–∫–ª–∞–º—ã –∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤?\n\n–ù–∞—à –±–æ—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—Å:\n\n‚úîÔ∏è –¢–æ–ª—å–∫–æ –ø–æ –≤–∞—à–µ–π —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ \n\n‚úîÔ∏è –¢–æ–ª—å–∫–æ —Ç–µ–º, –∫—Ç–æ —É–∂–µ –≤—ã–±—Ä–∞–ª –ø—Ä–æ–±–ª–µ–º—É\n\nüí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å ‚Äî –æ—Ç 390 —Ä—É–±/–º–µ—Å\nüìà –ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –∫–ª–∏–µ–Ω—Ç–∞ ‚Äî –¥–æ 25%\n\nüì© –û—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É ‚Äî –º—ã —Å–≤—è–∂–µ–º—Å—è –∏ –ø–æ–¥–∫–ª—é—á–∏–º –≤–∞—Å –ø–µ—Ä–≤—ã–º–∏', {
        reply_markup: keyboard
      });

      await ctx.answerCallbackQuery();
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π"
    if (data === 'contact_support') {
      const keyboard = new InlineKeyboard()
        .row({ text: 'üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É', callback_data: 'submit_support_application' })
        .row({ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_main' });

      await ctx.reply('üîß –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π\n–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –±–æ—Ç–æ–º ‚Äî –Ω–∞–∂–º–∏—Ç–µ —Å—é–¥–∞. –ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º.', {
        reply_markup: keyboard
      });

      await ctx.answerCallbackQuery();
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É" –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
    if (data === 'submit_support_application') {
      userStates[userId] = {
        action: 'waiting_support_application_name'
      };

      await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:');
      await ctx.answerCallbackQuery();
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É"
    if (data === 'submit_lawyer_application') {
      userStates[userId] = {
        action: 'waiting_lawyer_application_name'
      };

      await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:');
      await ctx.answerCallbackQuery();
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if (data === 'back_to_main') {
      await showMainMenu(ctx);
      await ctx.answerCallbackQuery();
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if (data.startsWith('back_to_category:')) {
      const categoryId = data.split(':')[1];
      await showRequestsForCategory(ctx, categoryId);
      await ctx.answerCallbackQuery();
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if (data.startsWith('category:')) {
      const categoryId = data.split(':')[1];
      await showRequestsForCategory(ctx, categoryId, 1, '');
      await ctx.answerCallbackQuery();
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    if (data.startsWith('category_page:')) {
      const parts = data.split(':');
      const categoryId = parts[1];
      const page = parseInt(parts[2]);
      const searchQuery = parts.length > 3 ? parts[3] : '';
      await showRequestsForCategory(ctx, categoryId, page, searchQuery);
      await ctx.answerCallbackQuery();
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º)
    if (data === 'noop') {
      await ctx.answerCallbackQuery();
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞
    if (data.startsWith('request:')) {
      const requestId = data.split(':')[1];
      await showLawyersForRequest(ctx, requestId);
      await ctx.answerCallbackQuery();
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if (data.startsWith('edit_category:')) {
      if (!isAdmin(ctx)) {
        await ctx.answerCallbackQuery('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
        return;
      }

      const categoryId = data.split(':')[1];
      userStates[userId] = {
        action: 'waiting_category_edit_name',
        categoryId
      };

      await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:');
      await ctx.answerCallbackQuery();
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if (data.startsWith('delete_category:')) {
      if (!isAdmin(ctx)) {
        await ctx.answerCallbackQuery('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
        return;
      }

      const categoryId = data.split(':')[1];

      // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
      const confirmKeyboard = new InlineKeyboard()
        .row({ text: '‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å', callback_data: `confirm_delete_category:${categoryId}` })
        .row({ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'back_to_main' });

      await ctx.reply('‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é? –í—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ —é—Ä–∏—Å—Ç—ã —Ç–∞–∫–∂–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã!', {
        reply_markup: confirmKeyboard
      });

      await ctx.answerCallbackQuery();
      return;
    }

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if (data.startsWith('confirm_delete_category:')) {
      if (!isAdmin(ctx)) {
        await ctx.answerCallbackQuery('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
        return;
      }

      const categoryId = data.split(':')[1];

      try {
        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const requests = await Request.find({ category: categoryId });

        // –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —É–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —é—Ä–∏—Å—Ç–æ–≤
        for (const request of requests) {
          await Lawyer.deleteMany({ request: request._id });
        }

        // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        await Request.deleteMany({ category: categoryId });

        // –£–¥–∞–ª—è–µ–º —Å–∞–º—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        await Category.findByIdAndDelete(categoryId);

        await ctx.reply('‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã');
        await showMainMenu(ctx);
      } catch (error) {
        console.error('Error deleting category:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
      }

      await ctx.answerCallbackQuery();
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
    if (data.startsWith('edit_request:')) {
      if (!isAdmin(ctx)) {
        await ctx.answerCallbackQuery('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
        return;
      }

      const requestId = data.split(':')[1];
      const request = await Request.findById(requestId);

      if (!request) {
        await ctx.reply('–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        await ctx.answerCallbackQuery();
        return;
      }

      userStates[userId] = {
        action: 'waiting_request_edit_title',
        requestId,
        categoryId: request.category
      };

      await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞:');
      await ctx.answerCallbackQuery();
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
    if (data.startsWith('delete_request:')) {
      if (!isAdmin(ctx)) {
        await ctx.answerCallbackQuery('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
        return;
      }

      const requestId = data.split(':')[1];
      const request = await Request.findById(requestId);

      if (!request) {
        await ctx.reply('–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        await ctx.answerCallbackQuery();
        return;
      }

      // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
      const confirmKeyboard = new InlineKeyboard()
        .row({ text: '‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å', callback_data: `confirm_delete_request:${requestId}` })
        .row({ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: `back_to_category:${request.category}` });

      await ctx.reply('‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å? –í—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —é—Ä–∏—Å—Ç—ã —Ç–∞–∫–∂–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã!', {
        reply_markup: confirmKeyboard
      });

      await ctx.answerCallbackQuery();
      return;
    }

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
    if (data.startsWith('confirm_delete_request:')) {
      if (!isAdmin(ctx)) {
        await ctx.answerCallbackQuery('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
        return;
      }

      const requestId = data.split(':')[1];

      try {
        const request = await Request.findById(requestId);
        if (!request) {
          await ctx.reply('–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω');
          await ctx.answerCallbackQuery();
          return;
        }

        const categoryId = request.category;

        // –£–¥–∞–ª—è–µ–º –≤—Å–µ—Ö —é—Ä–∏—Å—Ç–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –∑–∞–ø—Ä–æ—Å–æ–º
        await Lawyer.deleteMany({ request: requestId });

        // –£–¥–∞–ª—è–µ–º —Å–∞–º –∑–∞–ø—Ä–æ—Å
        await Request.findByIdAndDelete(requestId);

        await ctx.reply('‚úÖ –í–æ–ø—Ä–æ—Å –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã');
        await showRequestsForCategory(ctx, categoryId);
      } catch (error) {
        console.error('Error deleting request:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞');
      }

      await ctx.answerCallbackQuery();
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —é—Ä–∏—Å—Ç–∞
    if (data.startsWith('edit_lawyer:')) {
      if (!isAdmin(ctx)) {
        await ctx.answerCallbackQuery('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
        return;
      }

      const lawyerId = data.split(':')[1];
      const lawyer = await Lawyer.findById(lawyerId);

      if (!lawyer) {
        await ctx.reply('–Æ—Ä–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
        await ctx.answerCallbackQuery();
        return;
      }

      userStates[userId] = {
        action: 'waiting_lawyer_edit_name',
        lawyerId,
        requestId: lawyer.request
      };

      await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è —é—Ä–∏—Å—Ç–∞:');
      await ctx.answerCallbackQuery();
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —é—Ä–∏—Å—Ç–∞
    if (data.startsWith('delete_lawyer:')) {
      if (!isAdmin(ctx)) {
        await ctx.answerCallbackQuery('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
        return;
      }

      const lawyerId = data.split(':')[1];
      const lawyer = await Lawyer.findById(lawyerId);

      if (!lawyer) {
        await ctx.reply('–Æ—Ä–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
        await ctx.answerCallbackQuery();
        return;
      }

      // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
      const confirmKeyboard = new InlineKeyboard()
        .row({ text: '‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å', callback_data: `confirm_delete_lawyer:${lawyerId}` })
        .row({ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: `request:${lawyer.request}` });

      await ctx.reply('‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ —é—Ä–∏—Å—Ç–∞?', {
        reply_markup: confirmKeyboard
      });

      await ctx.answerCallbackQuery();
      return;
    }

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —é—Ä–∏—Å—Ç–∞
    if (data.startsWith('confirm_delete_lawyer:')) {
      if (!isAdmin(ctx)) {
        await ctx.answerCallbackQuery('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
        return;
      }

      const lawyerId = data.split(':')[1];

      try {
        const lawyer = await Lawyer.findById(lawyerId);
        if (!lawyer) {
          await ctx.reply('–Æ—Ä–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
          await ctx.answerCallbackQuery();
          return;
        }

        const requestId = lawyer.request;

        // –£–¥–∞–ª—è–µ–º —é—Ä–∏—Å—Ç–∞
        await Lawyer.findByIdAndDelete(lawyerId);

        await ctx.reply('‚úÖ –Æ—Ä–∏—Å—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω');
        await showLawyersForRequest(ctx, requestId);
      } catch (error) {
        console.error('Error deleting lawyer:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —é—Ä–∏—Å—Ç–∞');
      }

      await ctx.answerCallbackQuery();
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —é—Ä–∏—Å—Ç–µ
    if (data.startsWith('lawyer_info:')) {
      const lawyerId = data.split(':')[1];
      await showLawyerInfo(ctx, lawyerId);
      await ctx.answerCallbackQuery();
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω–∏ —é—Ä–∏—Å—Ç–∞
    if (data.startsWith('edit_lawyer_name:')) {
      if (!isAdmin(ctx)) {
        await ctx.answerCallbackQuery('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
        return;
      }

      const lawyerId = data.split(':')[1];
      const lawyer = await Lawyer.findById(lawyerId);

      if (!lawyer) {
        await ctx.reply('–Æ—Ä–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
        await ctx.answerCallbackQuery();
        return;
      }

      userStates[userId] = {
        action: 'waiting_lawyer_edit_name',
        lawyerId,
        requestId: lawyer.request
      };

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –∏–º—è —é—Ä–∏—Å—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      await ctx.reply(`–¢–µ–∫—É—â–µ–µ –∏–º—è: ${lawyer.name}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è —é—Ä–∏—Å—Ç–∞:`, {
        reply_markup: {
          force_reply: true,
          input_field_placeholder: lawyer.name
        }
      });

      await ctx.answerCallbackQuery();
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ —é—Ä–∏—Å—Ç–∞
    if (data.startsWith('edit_lawyer_contact:')) {
      if (!isAdmin(ctx)) {
        await ctx.answerCallbackQuery('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
        return;
      }

      const lawyerId = data.split(':')[1];
      const lawyer = await Lawyer.findById(lawyerId);

      if (!lawyer) {
        await ctx.reply('–Æ—Ä–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
        await ctx.answerCallbackQuery();
        return;
      }

      userStates[userId] = {
        action: 'waiting_lawyer_edit_contact_only',
        lawyerId,
        requestId: lawyer.request
      };

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–∞–∫—Ç —é—Ä–∏—Å—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      await ctx.reply(`–¢–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–∞–∫—Ç: ${lawyer.contact}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç —é—Ä–∏—Å—Ç–∞:`, {
        reply_markup: {
          force_reply: true,
          input_field_placeholder: lawyer.contact
        }
      });

      await ctx.answerCallbackQuery();
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ —é—Ä–∏—Å—Ç–∞
    if (data.startsWith('edit_lawyer_link:')) {
      if (!isAdmin(ctx)) {
        await ctx.answerCallbackQuery('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
        return;
      }

      const lawyerId = data.split(':')[1];
      const lawyer = await Lawyer.findById(lawyerId);

      if (!lawyer) {
        await ctx.reply('–Æ—Ä–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
        await ctx.answerCallbackQuery();
        return;
      }

      userStates[userId] = {
        action: 'waiting_lawyer_edit_link_only',
        lawyerId,
        requestId: lawyer.request
      };

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Å—ã–ª–∫—É —é—Ä–∏—Å—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      await ctx.reply(`–¢–µ–∫—É—â–∞—è —Å—Å—ã–ª–∫–∞: ${lawyer.link || '-'}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É —é—Ä–∏—Å—Ç–∞ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "-" –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):`, {
        reply_markup: {
          force_reply: true,
          input_field_placeholder: lawyer.link || '-'
        }
      });

      await ctx.answerCallbackQuery();
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è —é—Ä–∏—Å—Ç–∞
    if (data.startsWith('edit_lawyer_description:')) {
      if (!isAdmin(ctx)) {
        await ctx.answerCallbackQuery('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
        return;
      }

      const lawyerId = data.split(':')[1];
      const lawyer = await Lawyer.findById(lawyerId);

      if (!lawyer) {
        await ctx.reply('–Æ—Ä–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
        await ctx.answerCallbackQuery();
        return;
      }

      userStates[userId] = {
        action: 'waiting_lawyer_edit_description_only',
        lawyerId,
        requestId: lawyer.request
      };

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —é—Ä–∏—Å—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      await ctx.reply(`–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: ${lawyer.description || '-'}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —é—Ä–∏—Å—Ç–∞ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "-" –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):`, {
        reply_markup: {
          force_reply: true,
          input_field_placeholder: lawyer.description || '–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ'
        }
      });

      await ctx.answerCallbackQuery();
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —é—Ä–∏—Å—Ç–∞
    if (data.startsWith('delete_lawyer:')) {
      if (!isAdmin(ctx)) {
        await ctx.answerCallbackQuery('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
        return;
      }

      const lawyerId = data.split(':')[1];
      const lawyer = await Lawyer.findById(lawyerId);

      if (!lawyer) {
        await ctx.reply('–Æ—Ä–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
        await ctx.answerCallbackQuery();
        return;
      }

      // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
      const confirmKeyboard = new InlineKeyboard()
        .row({ text: '‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å', callback_data: `confirm_delete_lawyer:${lawyerId}` })
        .row({ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: `request:${lawyer.request}` });

      await ctx.reply('‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ —é—Ä–∏—Å—Ç–∞?', {
        reply_markup: confirmKeyboard
      });

      await ctx.answerCallbackQuery();
      return;
    }

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —é—Ä–∏—Å—Ç–∞
    if (data.startsWith('confirm_delete_lawyer:')) {
      if (!isAdmin(ctx)) {
        await ctx.answerCallbackQuery('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
        return;
      }

      const lawyerId = data.split(':')[1];

      try {
        const lawyer = await Lawyer.findById(lawyerId);
        if (!lawyer) {
          await ctx.reply('–Æ—Ä–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
          await ctx.answerCallbackQuery();
          return;
        }

        const requestId = lawyer.request;

        // –£–¥–∞–ª—è–µ–º —é—Ä–∏—Å—Ç–∞
        await Lawyer.findByIdAndDelete(lawyerId);

        await ctx.reply('‚úÖ –Æ—Ä–∏—Å—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω');
        await showLawyersForRequest(ctx, requestId);
      } catch (error) {
        console.error('Error deleting lawyer:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —é—Ä–∏—Å—Ç–∞');
      }

      await ctx.answerCallbackQuery();
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if (data.startsWith('show_users')) {
      if (!isAdmin(ctx)) {
        await ctx.answerCallbackQuery('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
        return;
      }
      // –ü–∞–≥–∏–Ω–∞—Ü–∏—è: show_users:0, show_users:30, ...
      const parts = data.split(':');
      const offset = parseInt(parts[1] || '0', 10);
      const limit = 30;
      // –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ username, –Ω–µ –ø—É—Å—Ç—ã–µ
      const users = await UserActionLog.aggregate([
        { $match: { username: { $ne: null, $ne: '' } } },
        { $group: { _id: '$username' } },
        { $sort: { _id: 1 } },
        { $skip: offset },
        { $limit: limit + 1 }
      ]);
      const hasNext = users.length > limit;
      const usersToShow = users.slice(0, limit);
      let msg = '<b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (@):</b>\n\n';
      if (usersToShow.length === 0) {
        msg += '–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å username.';
      } else {
        msg += usersToShow.map(u => '@' + u._id).join('\n');
      }
      const keyboard = new InlineKeyboard();
      if (hasNext) {
        keyboard.row({ text: '–î–∞–ª–µ–µ', callback_data: `show_users:${offset + limit}` });
      }
      keyboard.row({ text: '‚¨ÖÔ∏è –ó–∞–∫—Ä—ã—Ç—å', callback_data: 'close_users_list' });
      await ctx.reply(msg, { parse_mode: 'HTML', reply_markup: keyboard });
      await ctx.answerCallbackQuery();
      return;
    }
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if (data === 'close_users_list') {
      await ctx.deleteMessage();
      await ctx.answerCallbackQuery();
      return;
    }

    await ctx.answerCallbackQuery();
  } catch (error) {
    console.error('Error handling callback query:', error);
    await ctx.answerCallbackQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —é—Ä–∏—Å—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É
async function showLawyersForRequest(ctx, requestId) {
  try {
    const userId = ctx.from.id.toString();
    userStates[userId] = { requestId };

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–ø—Ä–æ—Å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const request = await Request.findById(requestId).populate('category');

    if (!request) {
      await ctx.reply('–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    const lawyers = await Lawyer.find({ request: requestId });

    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    const keyboard = new InlineKeyboard();

    // –î–æ–±–∞–≤–ª—è–µ–º —é—Ä–∏—Å—Ç–æ–≤
    for (const lawyer of lawyers) {
      keyboard.row({ text: lawyer.name, callback_data: `lawyer_info:${lawyer._id.toString()}` });
    }

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    if (isAdmin(ctx)) {
      keyboard.row({ text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å —é—Ä–∏—Å—Ç–∞', callback_data: `add_lawyer:${requestId}` });

      // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
      if (request.answer) {
        keyboard.row({ text: '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç', callback_data: `edit_request_answer:${requestId}` });
      } else {
        keyboard.row({ text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç', callback_data: `add_request_answer:${requestId}` });
      }

      keyboard.row(
        { text: '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data: `edit_request:${requestId}` },
        { text: 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å', callback_data: `delete_request:${requestId}` }
      );
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard.row({
      text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥',
      callback_data: `back_to_category:${request.category._id.toString()}`
    });

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    let message = `üìÇ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> ${request.category.name}\n\n`;
    message += `üìã <b>${request.title}</b>\n\n`;

    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if (request.answer) {
      message += `<b>–û—Ç–≤–µ—Ç:</b>\n${request.answer}\n\n`;
    }

    message += `<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —é—Ä–∏—Å—Ç—ã:</b>`;

    if (lawyers.length === 0) {
      message += '\n–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —é—Ä–∏—Å—Ç–æ–≤';
    }

    await ctx.reply(message, {
      reply_markup: keyboard,
      parse_mode: 'HTML'
    });
  } catch (error) {
    console.error('Error showing lawyers for request:', error);
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —é—Ä–∏—Å—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —é—Ä–∏—Å—Ç–µ
async function showLawyerInfo(ctx, lawyerId) {
  try {
    const lawyer = await Lawyer.findById(lawyerId).populate({
      path: 'request',
      populate: { path: 'category' }
    });

    if (!lawyer) {
      return ctx.reply('–Æ—Ä–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    let message = `üë®‚Äç‚öñÔ∏è ${lawyer.name}\n`;
    message += `üìû ${lawyer.contact}\n`;

    if (lawyer.link) {
      message += `üîó ${lawyer.link}\n`;
    }

    if (lawyer.description) {
      message += `\nüìù –û–ø–∏—Å–∞–Ω–∏–µ:\n${lawyer.description}`;
    }

    const keyboard = new InlineKeyboard();

    if (isAdmin(ctx)) {
      keyboard.row(
        { text: '‚úèÔ∏è –ò–º—è', callback_data: `edit_lawyer_name:${lawyer._id}` },
        { text: '‚úèÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç', callback_data: `edit_lawyer_contact:${lawyer._id}` }
      );
      keyboard.row(
        { text: '‚úèÔ∏è –°—Å—ã–ª–∫–∞', callback_data: `edit_lawyer_link:${lawyer._id}` },
        { text: '‚úèÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ', callback_data: `edit_lawyer_description:${lawyer._id}` }
      );
      keyboard.row({ text: 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å', callback_data: `delete_lawyer:${lawyer._id}` });
    }

    keyboard.row({
      text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É —é—Ä–∏—Å—Ç–æ–≤',
      callback_data: `request:${lawyer.request._id.toString()}`
    });

    await ctx.reply(message, {
      reply_markup: keyboard
    });
  } catch (error) {
    console.error('Error showing lawyer info:', error);
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —é—Ä–∏—Å—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ –ø–æ–∏—Å–∫–æ–º
async function showRequestsForCategory(ctx, categoryId, page = 1, searchQuery = '') {
  try {
    const userId = ctx.from.id.toString();
    userStates[userId] = { categoryId };

    const category = await Category.findById(categoryId);
    if (!category) {
      return ctx.reply('–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    let requestsQuery = { category: categoryId };

    // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å, –¥–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É
    if (searchQuery) {
      requestsQuery.title = { $regex: searchQuery, $options: 'i' };
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å —É—á–µ—Ç–æ–º –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    const requests = await Request.find(requestsQuery);

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    const itemsPerPage = 10; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    const totalPages = Math.ceil(requests.length / itemsPerPage);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if (page < 1) page = 1;
    if (page > totalPages && totalPages > 0) page = totalPages;

    // –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const startIndex = (page - 1) * itemsPerPage;
    const endIndex = Math.min(startIndex + itemsPerPage, requests.length);
    const currentPageRequests = requests.slice(startIndex, endIndex);

    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    const keyboard = new InlineKeyboard();

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ó–∞–¥–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å"
    keyboard.row({ text: '‚ùì –ó–∞–¥–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å', callback_data: `ask_question:${categoryId}` });

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–∏—Å–∫–∞
    keyboard.row({ text: 'üîç –ü–æ–∏—Å–∫', callback_data: `search:${categoryId}` });

    // –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å—ã —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    for (const request of currentPageRequests) {
      keyboard.row({ text: request.title, callback_data: `request:${request._id.toString()}` });
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    const navigationRow = [];

    // –ö–Ω–æ–ø–∫–∞ "–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"
    if (page > 1) {
      navigationRow.push({ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: `category_page:${categoryId}:${page - 1}:${searchQuery}` });
    }

    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    navigationRow.push({ text: `${page}/${totalPages || 1}`, callback_data: 'noop' });

    // –ö–Ω–æ–ø–∫–∞ "–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"
    if (page < totalPages) {
      navigationRow.push({ text: '–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è', callback_data: `category_page:${categoryId}:${page + 1}:${searchQuery}` });
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    if (navigationRow.length > 0) {
      keyboard.row(...navigationRow);
    }

    if (isAdmin(ctx)) {
      keyboard.row({ text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å', callback_data: `add_request:${categoryId}` });

      // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
      keyboard.row(
        { text: '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é', callback_data: `edit_category:${categoryId}` },
        { text: 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é', callback_data: `delete_category:${categoryId}` }
      );
    }

    keyboard.row({ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º', callback_data: 'back_to_main' });

    // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è
    let messageText = `–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${category.name}`;

    // –ï—Å–ª–∏ –±—ã–ª –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–º
    if (searchQuery) {
      messageText += `\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É: "${searchQuery}"`;
      if (requests.length === 0) {
        messageText += '\n\n–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.';
      } else {
        messageText += `\n–ù–∞–π–¥–µ–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: ${requests.length}`;
      }
    }

    messageText += '\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:';

    await ctx.reply(messageText, { reply_markup: keyboard });
  } catch (error) {
    console.error('Error showing requests:', error);
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–æ–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤
bot.on('message:text', async (ctx) => {
  try {
    const userId = ctx.from.id.toString();
    const text = ctx.message.text;

    // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç - —ç—Ç–æ –∫–Ω–æ–ø–∫–∞ "–í –Ω–∞—á–∞–ª–æ", —Ç–æ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —É–∂–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –≤ bot.hears
    if (text === 'üè† –í –Ω–∞—á–∞–ª–æ') return;

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    if (userStates[userId] && userStates[userId].action === 'waiting_search_query') {
      const searchQuery = text.trim();
      const categoryId = userStates[userId].categoryId;

      // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      delete userStates[userId];

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
      await showRequestsForCategory(ctx, categoryId, 1, searchQuery);
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    if (userStates[userId] && userStates[userId].action === 'waiting_user_question') {
      const question = text.trim();
      const categoryId = userStates[userId].categoryId;

      try {
        const category = await Category.findById(categoryId);
        if (!category) {
          await ctx.reply('–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.');
          delete userStates[userId];
          return;
        }

        // // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        // const userQuestion = new UserQuestion({
        //   userId: userId,
        //   username: ctx.from.username || `${ctx.from.first_name} ${ctx.from.last_name || ''}`.trim(),
        //   category: categoryId,
        //   question: question
        // });

        // await userQuestion.save();

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –Ω–∞ –∫–∞–Ω–∞–ª
        const channelId = process.env.ASK_APPLICATIONS_CHANNEL;

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–∞–Ω–∞–ª–∞
        const channelMessage = `üìù <b>–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å</b>\n\n` +
          `üë§ <b>–û—Ç:</b> ${ctx.from.username ? '@' + ctx.from.username : `${ctx.from.first_name} ${ctx.from.last_name || ''}`.trim()}\n` +
          `üìÇ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> ${category.name}\n\n` +
          `‚ùì <b>–í–æ–ø—Ä–æ—Å:</b>\n${question}`;

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –∫–∞–Ω–∞–ª
        await bot.api.sendMessage(channelId, channelMessage, { parse_mode: 'HTML' });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await ctx.reply('–í–∞—à –≤–æ–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç! \n–ú—ã –ø–æ–¥–±–µ—Ä—ë–º –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —é—Ä–∏—Å—Ç–∞ –∏ —Å–≤—è–∂–µ–º—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. –ü–æ–∫–∞ –≤—ã –∂–¥—ë—Ç–µ ‚Äî –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å —á–∞—Å—Ç—ã–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏ –Ω–∞ –ø–æ—Ö–æ–∂–∏–µ —Ç–µ–º—ãüëá');

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–æ–ø—Ä–æ—Å—ã –∏–∑ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        await showRequestsForCategory(ctx, categoryId);

        // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        delete userStates[userId];
      } catch (error) {
        console.error('Error processing user question:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      }

      return;
    }

    // –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (!userStates[userId]) return;

    const state = userStates[userId];

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    if (state.action === 'waiting_search_query') {
      const categoryId = state.categoryId;
      const searchQuery = text.trim();

      // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      delete userStates[userId];

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
      await showRequestsForCategory(ctx, categoryId, 1, searchQuery);
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if (state.action === 'waiting_category_name') {
      const categoryName = text.trim();

      if (!categoryName) {
        return ctx.reply('–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:');
      }

      try {
        const newCategory = new Category({
          name: state.categoryName || categoryName,
          description: ''
        });

        await newCategory.save();
        delete userStates[userId];

        ctx.reply(`–ö–∞—Ç–µ–≥–æ—Ä–∏—è "${categoryName}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!`);
        return showMainMenu(ctx);
      } catch (error) {
        console.error('Error saving category:', error);
        return ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if (state.action === 'waiting_category_edit_name') {
      const newName = text.trim();

      if (!newName) {
        return ctx.reply('–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:');
      }

      try {
        await Category.findByIdAndUpdate(state.categoryId, { name: newName });
        delete userStates[userId];

        ctx.reply(`‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞ –≤ "${newName}"`);
        return showMainMenu(ctx);
      } catch (error) {
        console.error('Error updating category:', error);
        return ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
    if (state.action === 'waiting_request_title') {
      const requestTitle = text.trim();

      if (!requestTitle) {
        return ctx.reply('–ù–∞–∑–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:');
      }

      try {
        const newRequest = new Request({
          category: state.categoryId,
          title: requestTitle,
          description: ''
        });

        await newRequest.save();
        delete userStates[userId];

        ctx.reply(`–í–æ–ø—Ä–æ—Å "${requestTitle}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!`);
        return showRequestsForCategory(ctx, state.categoryId);
      } catch (error) {
        console.error('Error saving request:', error);
        return ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
    if (state.action === 'waiting_request_edit_title') {
      const newTitle = text.trim();

      if (!newTitle) {
        return ctx.reply('–ù–∞–∑–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:');
      }

      try {
        await Request.findByIdAndUpdate(state.requestId, { title: newTitle });
        delete userStates[userId];

        ctx.reply(`‚úÖ –í–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤ "${newTitle}"`);
        return showRequestsForCategory(ctx, state.categoryId);
      } catch (error) {
        console.error('Error updating request:', error);
        return ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ —é—Ä–∏—Å—Ç–∞
    if (state.action === 'waiting_lawyer_name') {
      const lawyerName = text.trim();

      if (!lawyerName) {
        return ctx.reply('–ò–º—è —é—Ä–∏—Å—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:');
      }

      userStates[userId] = {
        action: 'waiting_lawyer_contact',
        requestId: state.requestId,
        lawyerName
      };

      return ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —é—Ä–∏—Å—Ç–∞:');
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ —é—Ä–∏—Å—Ç–∞
    if (state.action === 'waiting_lawyer_contact') {
      const contact = text.trim();

      if (!contact) {
        return ctx.reply('–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:');
      }

      userStates[userId] = {
        action: 'waiting_lawyer_link',
        requestId: state.requestId,
        lawyerName: state.lawyerName,
        contact
      };

      return ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —é—Ä–∏—Å—Ç–∞ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "-" –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):');
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–∫–∏ —é—Ä–∏—Å—Ç–∞
    if (state.action === 'waiting_lawyer_link') {
      let link = text.trim();

      if (link === '-') {
        link = '';
      }

      userStates[userId] = {
        action: 'waiting_lawyer_description',
        requestId: state.requestId,
        lawyerName: state.lawyerName,
        contact: state.contact,
        link
      };

      return ctx.reply('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —é—Ä–∏—Å—Ç–∞ (—á–µ–º –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ —Ç.–¥.) –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "-" –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞:');
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è —é—Ä–∏—Å—Ç–∞
    if (state.action === 'waiting_lawyer_description') {
      let description = text.trim();

      if (description === '-') {
        description = '';
      }

      try {
        const newLawyer = new Lawyer({
          request: state.requestId,
          name: state.lawyerName,
          contact: state.contact,
          link: state.link,
          description
        });

        await newLawyer.save();
        delete userStates[userId];

        ctx.reply(`–Æ—Ä–∏—Å—Ç "${state.lawyerName}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!`);
        return showLawyersForRequest(ctx, state.requestId);
      } catch (error) {
        console.error('Error saving lawyer:', error);
        return ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —é—Ä–∏—Å—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω–∏ —é—Ä–∏—Å—Ç–∞
    if (state.action === 'waiting_lawyer_edit_name') {
      const newName = text.trim();

      if (!newName) {
        return ctx.reply('–ò–º—è —é—Ä–∏—Å—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:');
      }

      try {
        const lawyer = await Lawyer.findById(state.lawyerId);
        if (!lawyer) {
          delete userStates[userId];
          return ctx.reply('–Æ—Ä–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        await Lawyer.findByIdAndUpdate(state.lawyerId, { name: newName });
        delete userStates[userId];

        ctx.reply(`‚úÖ –ò–º—è —é—Ä–∏—Å—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ "${newName}"`);
        return showLawyerInfo(ctx, state.lawyerId);
      } catch (error) {
        console.error('Error updating lawyer name:', error);
        return ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–º–µ–Ω–∏ —é—Ä–∏—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞ —é—Ä–∏—Å—Ç–∞
    if (state.action === 'waiting_lawyer_edit_contact_only') {
      const newContact = text.trim();

      if (!newContact) {
        return ctx.reply('–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:');
      }

      try {
        const lawyer = await Lawyer.findById(state.lawyerId);
        if (!lawyer) {
          delete userStates[userId];
          return ctx.reply('–Æ—Ä–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        await Lawyer.findByIdAndUpdate(state.lawyerId, { contact: newContact });
        delete userStates[userId];

        ctx.reply(`‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç —é—Ä–∏—Å—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "${newContact}"`);
        return showLawyerInfo(ctx, state.lawyerId);
      } catch (error) {
        console.error('Error updating lawyer contact:', error);
        return ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞ —é—Ä–∏—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ —Å—Å—ã–ª–∫–∏ —é—Ä–∏—Å—Ç–∞
    if (state.action === 'waiting_lawyer_edit_link_only') {
      let newLink = text.trim();

      if (newLink === '-') {
        newLink = '';
      }

      try {
        const lawyer = await Lawyer.findById(state.lawyerId);
        if (!lawyer) {
          delete userStates[userId];
          return ctx.reply('–Æ—Ä–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        await Lawyer.findByIdAndUpdate(state.lawyerId, { link: newLink });
        delete userStates[userId];

        ctx.reply(`‚úÖ –°—Å—ã–ª–∫–∞ —é—Ä–∏—Å—Ç–∞ —É—Å–ø–µ—à–Ω–æ ${newLink ? '–∏–∑–º–µ–Ω–µ–Ω–∞' : '—É–¥–∞–ª–µ–Ω–∞'}`);
        return showLawyerInfo(ctx, state.lawyerId);
      } catch (error) {
        console.error('Error updating lawyer link:', error);
        return ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ —é—Ä–∏—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –æ–ø–∏—Å–∞–Ω–∏—è —é—Ä–∏—Å—Ç–∞
    if (state.action === 'waiting_lawyer_edit_description_only') {
      let newDescription = text.trim();

      if (newDescription === '-') {
        newDescription = '';
      }

      try {
        const lawyer = await Lawyer.findById(state.lawyerId);
        if (!lawyer) {
          delete userStates[userId];
          return ctx.reply('–Æ—Ä–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        await Lawyer.findByIdAndUpdate(state.lawyerId, { description: newDescription });
        delete userStates[userId];

        ctx.reply(`‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —é—Ä–∏—Å—Ç–∞ —É—Å–ø–µ—à–Ω–æ ${newDescription ? '–∏–∑–º–µ–Ω–µ–Ω–æ' : '—É–¥–∞–ª–µ–Ω–æ'}`);
        return showLawyerInfo(ctx, state.lawyerId);
      } catch (error) {
        console.error('Error updating lawyer description:', error);
        return ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è —é—Ä–∏—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ —é—Ä–∏—Å—Ç–∞
    if (state.action === 'waiting_lawyer_edit_contact') {
      const newContact = text.trim();

      if (!newContact) {
        return ctx.reply('–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:');
      }

      userStates[userId] = {
        action: 'waiting_lawyer_edit_link',
        lawyerId: state.lawyerId,
        requestId: state.requestId,
        newName: state.newName,
        newContact
      };

      return ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —é—Ä–∏—Å—Ç–∞ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "-" –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):');
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ —é—Ä–∏—Å—Ç–∞
    if (state.action === 'waiting_lawyer_edit_link') {
      let newLink = text.trim();

      if (newLink === '-') {
        newLink = '';
      }

      userStates[userId] = {
        action: 'waiting_lawyer_edit_description',
        lawyerId: state.lawyerId,
        requestId: state.requestId,
        newName: state.newName,
        newContact: state.newContact,
        newLink
      };

      return ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —é—Ä–∏—Å—Ç–∞ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "-" –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):');
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è —é—Ä–∏—Å—Ç–∞
    if (state.action === 'waiting_lawyer_edit_description') {
      let newDescription = text.trim();

      if (newDescription === '-') {
        newDescription = '';
      }

      try {
        await Lawyer.findByIdAndUpdate(state.lawyerId, {
          name: state.newName,
          contact: state.newContact,
          link: state.newLink,
          description: newDescription
        });

        delete userStates[userId];

        ctx.reply(`‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —é—Ä–∏—Å—Ç–µ "${state.newName}" —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!`);
        return showLawyerInfo(ctx, state.lawyerId);
      } catch (error) {
        console.error('Error updating lawyer:', error);
        return ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —é—Ä–∏—Å—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å
    if (state.action === 'waiting_request_answer') {
      if (!isAdmin(ctx)) {
        await ctx.reply('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
        return;
      }

      try {
        const request = await Request.findById(state.requestId);

        if (!request) {
          await ctx.reply('–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω');
          delete userStates[userId];
          return;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        request.answer = text;
        await request.save();

        await ctx.reply('‚úÖ –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω');

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–ø—Ä–æ—Å–µ
        await showLawyersForRequest(ctx, state.requestId);

        // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        delete userStates[userId];
      } catch (error) {
        console.error('Error saving request answer:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞');
      }

      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏ –æ—Ç —é—Ä–∏—Å—Ç–∞ - –∏–º—è
    if (state.action === 'waiting_lawyer_application_name') {
      userStates[userId] = {
        action: 'waiting_lawyer_application_channel',
        name: text
      };

      await ctx.reply('–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à Telegram –∫–∞–Ω–∞–ª (–µ—Å–ª–∏ –Ω–µ—Ç, –≤–≤–µ–¥–∏—Ç–µ "-"):');
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª –¥–ª—è –∑–∞—è–≤–∫–∏ —é—Ä–∏—Å—Ç–∞
    if (state.action === 'waiting_lawyer_application_channel') {
      userStates[userId] = {
        action: 'waiting_lawyer_application_phone',
        name: state.name,
        telegramChannel: text === '-' ? '' : text
      };

      await ctx.reply('–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏:');
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –∑–∞—è–≤–∫–∏ —é—Ä–∏—Å—Ç–∞
    if (state.action === 'waiting_lawyer_application_phone') {
      try {
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await ctx.reply('‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.');

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª –¥–ª—è –∑–∞—è–≤–æ–∫
        const notificationChannel = process.env.LAWYER_APPLICATIONS_CHANNEL;
        if (notificationChannel) {
          try {
            await bot.api.sendMessage(notificationChannel,
              `üì© –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç —é—Ä–∏—Å—Ç–∞!\n\n` +
              `üë®‚Äç‚öñÔ∏è –§–ò–û: ${state.name}\n` +
              `üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${text}\n` +
              `üîó Telegram: ${state.telegramChannel || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n`
            );
          } catch (error) {
            console.error('Error sending notification to channel:', error);
          }
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const lawyerApplication = new LawyerApplication({
          name: state.name,
          telegramChannel: state.telegramChannel,
          phone: text
        });

        await lawyerApplication.save();

        // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        delete userStates[userId];

      } catch (error) {
        console.error('Error processing lawyer application:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      }
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É - –∏–º—è
    if (state.action === 'waiting_support_application_name') {
      userStates[userId] = {
        action: 'waiting_support_application_channel',
        name: text
      };

      await ctx.reply('–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à Telegram –∫–∞–Ω–∞–ª (–µ—Å–ª–∏ –Ω–µ—Ç, –≤–≤–µ–¥–∏—Ç–µ "-"):');
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª –¥–ª—è –∑–∞—è–≤–∫–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
    if (state.action === 'waiting_support_application_channel') {
      userStates[userId] = {
        action: 'waiting_support_application_phone',
        name: state.name,
        telegramChannel: text === '-' ? '' : text
      };

      await ctx.reply('–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏:');
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –∑–∞—è–≤–∫–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
    if (state.action === 'waiting_support_application_phone') {
      userStates[userId] = {
        action: 'waiting_support_application_question',
        name: state.name,
        telegramChannel: state.telegramChannel,
        phone: text
      };

      await ctx.reply('–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:');
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –∑–∞—è–≤–∫–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
    if (state.action === 'waiting_support_application_question') {
      try {
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await ctx.reply('‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.');

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª –¥–ª—è –∑–∞—è–≤–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        const notificationChannel = process.env.SUPPORT_APPLICATIONS_CHANNEL;
        if (notificationChannel) {
          try {
            await bot.api.sendMessage(notificationChannel,
              `üì© –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!\n\n` +
              `üë§ –§–ò–û: ${state.name}\n` +
              `üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${state.phone}\n` +
              `üîó Telegram: ${state.telegramChannel || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
              `‚ùì –í–æ–ø—Ä–æ—Å: ${text}\n\n`
            );
          } catch (error) {
            console.error('Error sending notification to channel:', error);
          }
        }

        // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        delete userStates[userId];

      } catch (error) {
        console.error('Error processing support application:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      }
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —é—Ä–∏—Å—Ç–∞
    if (state.action === 'waiting_lawyer_delete') {
      if (!isAdmin(ctx)) {
        await ctx.answerCallbackQuery('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
        return;
      }

      const lawyerId = data.split(':')[1];
      const lawyer = await Lawyer.findById(lawyerId);

      if (!lawyer) {
        await ctx.reply('–Æ—Ä–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
        await ctx.answerCallbackQuery();
        return;
      }

      // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
      const confirmKeyboard = new InlineKeyboard()
        .row({ text: '‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å', callback_data: `confirm_delete_lawyer:${lawyerId}` })
        .row({ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: `request:${lawyer.request}` });

      await ctx.reply('‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ —é—Ä–∏—Å—Ç–∞?', {
        reply_markup: confirmKeyboard
      });

      await ctx.answerCallbackQuery();
      return;
    }

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —é—Ä–∏—Å—Ç–∞
    if (state.action === 'confirm_delete_lawyer') {
      if (!isAdmin(ctx)) {
        await ctx.answerCallbackQuery('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
        return;
      }

      const lawyerId = data.split(':')[1];

      try {
        const lawyer = await Lawyer.findById(lawyerId);
        if (!lawyer) {
          await ctx.reply('–Æ—Ä–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
          await ctx.answerCallbackQuery();
          return;
        }

        const requestId = lawyer.request;

        // –£–¥–∞–ª—è–µ–º —é—Ä–∏—Å—Ç–∞
        await Lawyer.findByIdAndDelete(lawyerId);

        await ctx.reply('‚úÖ –Æ—Ä–∏—Å—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω');
        await showLawyersForRequest(ctx, requestId);
      } catch (error) {
        console.error('Error deleting lawyer:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —é—Ä–∏—Å—Ç–∞');
      }

      await ctx.answerCallbackQuery();
      return;
    }

    await ctx.answerCallbackQuery();
  } catch (error) {
    console.error('Error handling text message:', error);
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞
bot.catch((err) => {
  const ctx = err.ctx;
  console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ${ctx.update.update_id}:`);
  console.error(err.error);

  // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
  try {
    if (ctx.chat) {
      ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
  } catch (e) {
    console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:', e);
  }
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.start();